Resize Operation: 
A hash table resize operation increases the number of buckets, while preserving all existing items.

The time complexity O(N)

# Hash Table resize operation: 
HashResize(hashTable, currentSize) {
   newSize = nextPrime(currentSize * 2)

   newArray = Allocate new array of size newSize
   Set all entries in newArray to EmptySinceStart

   bucket = 0
   while (bucket < currentSize) {
      if (hashTable[bucket] is not Empty) {
         key = hashTable[bucket]
         HashInsert(newArray, key)
      }
      bucket = bucket + 1
   }

   return newArray
}

Hash(key, tableSize) {
   return key%tableSize
}

# When to resize 
A hash table's load factor  is the number of items in the hash table divided by the number of buckets
Also, an implementation may have different reasons to resize the hash table.

Load factor
When using open-addressing, the number of collisions during an insertion
When using chaining, the size of a bucket's linked-list.



