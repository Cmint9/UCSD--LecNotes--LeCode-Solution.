Linear search vs. binary search 

Linear search may require searching all list elements, which can lead to long runtimes. 
For example, searching for a contact on a smartphone one by one from first to last can be time-consuming.

Binary search: Binary search is a faster algorithm for searching a list if the list's elements are sorted and directly accessible (such as an array). 
Binary search first checks the middle element of the list. If the search key is found, the algorithm returns the matching location. 

# Binary Search Algorithm
BinarySearch(numbers, numbersSize, key) {
   mid = 0
   low = 0
   high = numbersSize - 1
   
   while (high >= low) {
      mid = (high + low) / 2
      if (numbers[mid] < key) {
         low = mid + 1
      }
      else if (numbers[mid] > key) {
         high = mid - 1
      }
      else {
         return mid
      }
   }
   
   return -1 // not found
}

main() {
   numbers = { 2, 4, 7, 10, 11, 32, 45, 87 }
   NUMBERS_SIZE = 8
   i = 0
   key = 0
   keyIndex = 0
   
   print("NUMBERS: ")
   for (i = 0; i < NUMBERS_SIZE; ++i) {
      print(numbers[i] + " ")
   }
   printLine()
   
   print("Enter a value: ")
   key = getIntFromUser()
   
   keyIndex = BinarySearch(numbers, NUMBERS_SIZE, key)
   
   if (keyIndex == -1) {
      printLine(key + " was not found.")
   }
   else {
      printLine("Found " + key + " at index " + keyIndex + ".")
   }
}

Outputï¼š NUMBERS: 2 4 7 10 11 32 45 87 
Enter a value: 10
Found 10 at index 3.
...
NUMBERS: 2 4 7 10 11 32 45 87 
Enter a value: 17
17 was not found.

