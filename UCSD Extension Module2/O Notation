O Notation: 

Big O notation is a powerful tool. We usually use to used describe the time complexity or space complexity of algorithms. 

# Importance of Big O notation 
1. Big O notation is important because it helps analyze the efficiency of algorithms
2. It provides a ways to describe how the runtime or space
3. It helps in understanding the scalability of algorithms and predicting how they will perform as the input size grows.

#Here are some examples:
1. Reflexivity 
For any function f(n), f(n) = O(f(n)).
2. Transitivity
If f(n) = O(g(n)) and g(n) = O(h(n)), then f(n) = O(h(n)).
3. Constant Factor 
For any constant c > 0 and functions f(n) and g(n), if f(n) = O(g(n)), then cf(n) = O(g(n)).
4. Sum rule
If f(n) = O(g(n)) and h(n) = O(k(n)), then f(n) + h(n) = O(max( g(n), k(n) ) When combining complexities, only the largest term dominates.
For example: f(n) = n2, h(n) = n3. Then , f(n) + h(n) = O(max(n2 + n3) = O ( n3)
5. Product rule 
If f(n) = O(g(n)) and h(n) = O(k(n)), then f(n) * h(n) = O(g(n) * k(n)).
6. Composition rule 
If f(n) = O(g(n)) and g(n) = O(h(n)), then f(g(n)) = O(h(n)).

Common Big _O notation: 

Linear Time Complexity: 
Big O(n) complexity 
Linear time complexity mean sthat the runnig time of an algorithm grows linearly 
withe the size of the input






