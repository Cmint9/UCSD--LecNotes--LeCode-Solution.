Binary Search Tree (BST) 

Given a BST, the task is to search for a node in this BST. In order to search for a value in BST,
We should consider it as a sorted array. 

Algorithms to search for a key in a given Binary Search Tree: 
Here are some steps: we compare the value to be searched with the value of the root 
                      Also, we need to repeat the above step till no more traversal is possible. 
                      If at any iteration, key is found, return true. Otherwise, return false.


Here is the code for the algroithm: 

class Node:
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None

# function to search a key in a BST
def search(root, key):
  
    # Base Cases: root is null or key 
    # is present at root
    if root is None or root.key == key:
        return root
    
    # Key is greater than root's key
    if root.key < key:
        return search(root.right, key)
    
    # Key is smaller than root's key
    return search(root.left, key)


 # Creating a hard-coded tree for keeping 
 # the length of the code small. We need 
 # to make sure that BST properties are 
 # maintained if we try some other cases.
root = Node(50)
root.left = Node(30)
root.right = Node(70)
root.left.left = Node(20)
root.left.right = Node(40)
root.right.left = Node(60)
root.right.right = Node(80)

# Searching for keys in the BST
print("Found" if search(root, 19) else "Not Found")
print("Found" if search(root, 80) else "Not Found")


Follow the code, we can know the time complexity: O(h), where h is the height of the BST


